	.file	"bootpack.c"
	.data
LC1:
	.ascii "scrnx = \"%d\"\0"
LC2:
	.ascii "scrny = \"%d\"\0"
	.text
	.balign 2
.globl _HariMain
	.def	_HariMain;	.scl	2;	.type	32;	.endef
_HariMain:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$256, %esp
	call	_init_palette
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_init_desktop
	movswl	4084,%eax
	pushl	%eax
	pushl	$LC1
	pushl	%ebx
	call	_sprintf
	pushl	%ebx
	pushl	$7
	pushl	$8
	pushl	$8
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_putFonts8_asc
	addl	$48, %esp
	movswl	4086,%eax
	pushl	%eax
	pushl	$LC2
	pushl	%ebx
	call	_sprintf
	pushl	%ebx
	pushl	$7
	leal	-260(%ebp), %ebx
	pushl	$26
	pushl	$8
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_putFonts8_asc
	addl	$36, %esp
	pushl	$14
	pushl	%ebx
	call	_init_mouse_cursor8
	pushl	$16
	pushl	%ebx
	pushl	$180
	pushl	$180
	pushl	$16
	pushl	$16
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_putblock8_8
	addl	$40, %esp
L2:
	call	_io_hlt
	jmp	L2
	.data
_table_rgb.0:
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-58
	.byte	-58
	.byte	-58
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.text
	.balign 2
.globl _init_palette
	.def	_init_palette;	.scl	2;	.type	32;	.endef
_init_palette:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$_table_rgb.0
	pushl	$15
	pushl	$0
	call	_set_palette
	leave
	ret
	.balign 2
.globl _set_palette
	.def	_set_palette;	.scl	2;	.type	32;	.endef
_set_palette:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%ecx
	movl	8(%ebp), %ebx
	movl	12(%ebp), %edi
	movl	16(%ebp), %esi
	call	_io_load_eflags
	movl	%eax, -16(%ebp)
	call	_io_cli
	pushl	%ebx
	pushl	$968
	call	_io_out8
	cmpl	%edi, %ebx
	popl	%eax
	popl	%edx
	jle	L11
L13:
	movl	-16(%ebp), %eax
	movl	%eax, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_io_store_eflags
L11:
	movb	(%esi), %al
	incl	%ebx
	shrb	$2, %al
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	movb	1(%esi), %al
	shrb	$2, %al
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	movb	2(%esi), %al
	shrb	$2, %al
	addl	$3, %esi
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$24, %esp
	cmpl	%edi, %ebx
	jle	L11
	jmp	L13
	.balign 2
.globl _fill_rectangle8
	.def	_fill_rectangle8;	.scl	2;	.type	32;	.endef
_fill_rectangle8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	24(%ebp), %ecx
	movl	32(%ebp), %esi
	pushl	%ebx
	movl	28(%ebp), %edi
	movb	16(%ebp), %bl
	cmpl	%esi, %ecx
	jg	L26
	movl	12(%ebp), %eax
	imull	%ecx, %eax
	addl	8(%ebp), %eax
L24:
	movl	20(%ebp), %edx
	cmpl	%edi, %edx
	jg	L28
L23:
	movb	%bl, (%edx,%eax)
	incl	%edx
	cmpl	%edi, %edx
	jle	L23
L28:
	incl	%ecx
	addl	12(%ebp), %eax
	cmpl	%esi, %ecx
	jle	L24
L26:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _init_desktop
	.def	_init_desktop;	.scl	2;	.type	32;	.endef
_init_desktop:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$24, %esp
	movswl	12(%ebp),%ebx
	movswl	16(%ebp),%eax
	movl	%eax, -16(%ebp)
	leal	-1(%ebx), %edi
	decl	%eax
	leal	-4(%ebx), %esi
	pushl	%eax
	movl	%eax, -20(%ebp)
	pushl	%edi
	pushl	$0
	pushl	$0
	pushl	$14
	pushl	%ebx
	pushl	8(%ebp)
	call	_fill_rectangle8
	movl	-16(%ebp), %eax
	subl	$25, %eax
	pushl	%eax
	pushl	%edi
	pushl	%eax
	pushl	$0
	pushl	$7
	pushl	%ebx
	pushl	8(%ebp)
	call	_fill_rectangle8
	movl	-16(%ebp), %eax
	addl	$56, %esp
	subl	$24, %eax
	pushl	-20(%ebp)
	pushl	%edi
	leal	-47(%ebx), %edi
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	%ebx
	pushl	8(%ebp)
	call	_fill_rectangle8
	movl	-16(%ebp), %eax
	subl	$21, %eax
	pushl	%eax
	movl	%eax, -24(%ebp)
	pushl	$59
	pushl	%eax
	pushl	$3
	pushl	$7
	pushl	%ebx
	pushl	8(%ebp)
	call	_fill_rectangle8
	movl	-16(%ebp), %eax
	addl	$56, %esp
	subl	$4, %eax
	movl	%eax, -28(%ebp)
	pushl	%eax
	pushl	$2
	pushl	-24(%ebp)
	pushl	$2
	pushl	$7
	pushl	%ebx
	pushl	8(%ebp)
	call	_fill_rectangle8
	pushl	-28(%ebp)
	pushl	$59
	pushl	-28(%ebp)
	pushl	$3
	pushl	$15
	pushl	%ebx
	pushl	8(%ebp)
	call	_fill_rectangle8
	movl	-16(%ebp), %eax
	addl	$56, %esp
	subl	$5, %eax
	pushl	%eax
	movl	-16(%ebp), %eax
	pushl	$59
	subl	$20, %eax
	pushl	%eax
	movl	%eax, -32(%ebp)
	pushl	$59
	pushl	$15
	pushl	%ebx
	pushl	8(%ebp)
	call	_fill_rectangle8
	movl	-16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	movl	%eax, -36(%ebp)
	pushl	$59
	pushl	%eax
	pushl	$2
	pushl	$0
	pushl	%ebx
	pushl	8(%ebp)
	call	_fill_rectangle8
	addl	$56, %esp
	pushl	-36(%ebp)
	pushl	$60
	pushl	-24(%ebp)
	pushl	$60
	pushl	$0
	pushl	%ebx
	pushl	8(%ebp)
	call	_fill_rectangle8
	pushl	-24(%ebp)
	pushl	%esi
	pushl	-24(%ebp)
	pushl	%edi
	pushl	$15
	pushl	%ebx
	pushl	8(%ebp)
	call	_fill_rectangle8
	addl	$56, %esp
	pushl	-28(%ebp)
	pushl	%edi
	pushl	-32(%ebp)
	pushl	%edi
	pushl	$15
	pushl	%ebx
	pushl	8(%ebp)
	call	_fill_rectangle8
	pushl	-36(%ebp)
	pushl	%esi
	pushl	-36(%ebp)
	pushl	%edi
	pushl	$7
	pushl	%ebx
	pushl	8(%ebp)
	call	_fill_rectangle8
	leal	-3(%ebx), %eax
	addl	$56, %esp
	pushl	-36(%ebp)
	pushl	%eax
	pushl	-24(%ebp)
	pushl	%eax
	pushl	$7
	pushl	%ebx
	pushl	8(%ebp)
	call	_fill_rectangle8
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _putFont8
	.def	_putFont8;	.scl	2;	.type	32;	.endef
_putFont8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%esi, %esi
	pushl	%ebx
	movl	28(%ebp), %edi
	movb	24(%ebp), %bl
L43:
	movl	20(%ebp), %eax
	movl	16(%ebp), %edx
	addl	%esi, %eax
	imull	12(%ebp), %eax
	addl	8(%ebp), %eax
	leal	(%edx,%eax), %ecx
	movb	(%esi,%edi), %dl
	testb	%dl, %dl
	jns	L35
	movb	%bl, (%ecx)
L35:
	movb	%dl, %al
	andl	$64, %eax
	testb	%al, %al
	je	L36
	movb	%bl, 1(%ecx)
L36:
	movb	%dl, %al
	andl	$32, %eax
	testb	%al, %al
	je	L37
	movb	%bl, 2(%ecx)
L37:
	movb	%dl, %al
	andl	$16, %eax
	testb	%al, %al
	je	L38
	movb	%bl, 3(%ecx)
L38:
	movb	%dl, %al
	andl	$8, %eax
	testb	%al, %al
	je	L39
	movb	%bl, 4(%ecx)
L39:
	movb	%dl, %al
	andl	$4, %eax
	testb	%al, %al
	je	L40
	movb	%bl, 5(%ecx)
L40:
	movb	%dl, %al
	andl	$2, %eax
	testb	%al, %al
	je	L41
	movb	%bl, 6(%ecx)
L41:
	andl	$1, %edx
	testb	%dl, %dl
	je	L33
	movb	%bl, 7(%ecx)
L33:
	incl	%esi
	cmpl	$15, %esi
	jle	L43
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _putFonts8_asc
	.def	_putFonts8_asc;	.scl	2;	.type	32;	.endef
_putFonts8_asc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%ebx
	movl	28(%ebp), %ebx
	movb	24(%ebp), %al
	movb	%al, -13(%ebp)
	movl	16(%ebp), %esi
	movl	20(%ebp), %edi
	cmpb	$0, (%ebx)
	jne	L51
L53:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L51:
	movzbl	(%ebx), %eax
	sall	$4, %eax
	incl	%ebx
	addl	$_hankaku, %eax
	pushl	%eax
	movsbl	-13(%ebp),%eax
	pushl	%eax
	pushl	%edi
	pushl	%esi
	addl	$8, %esi
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_putFont8
	addl	$24, %esp
	cmpb	$0, (%ebx)
	jne	L51
	jmp	L53
	.data
_cursor.1:
	.ascii "**************.."
	.ascii "*00000000000*..."
	.ascii "*0000000000*...."
	.ascii "*000000000*....."
	.ascii "*00000000*......"
	.ascii "*0000000*......."
	.ascii "*0000000*......."
	.ascii "*00000000*......"
	.ascii "*0000**000*....."
	.ascii "*000*..*000*...."
	.ascii "*00*....*000*..."
	.ascii "*0*......*000*.."
	.ascii "**........*000*."
	.ascii "*..........*000*"
	.ascii "............*00*"
	.ascii ".............***"
	.text
	.balign 2
.globl _init_mouse_cursor8
	.def	_init_mouse_cursor8;	.scl	2;	.type	32;	.endef
_init_mouse_cursor8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%edi, %edi
	pushl	%ebx
	subl	$12, %esp
	movb	12(%ebp), %al
	movl	8(%ebp), %esi
	movb	%al, -13(%ebp)
	movl	$0, -20(%ebp)
	movl	$0, -24(%ebp)
L71:
	movl	-24(%ebp), %ecx
	xorl	%ebx, %ebx
	addl	%esi, %ecx
L70:
	leal	(%ebx,%edi), %edx
	movsbl	_cursor.1(%edx),%eax
	cmpl	$46, %eax
	je	L66
	cmpl	$46, %eax
	jg	L69
	cmpl	$42, %eax
	je	L64
L67:
	movb	-13(%ebp), %al
	movb	%al, (%ecx)
L61:
	incl	%ebx
	incl	%ecx
	cmpl	$15, %ebx
	jle	L70
	incl	-20(%ebp)
	addl	$16, %edi
	addl	$16, -24(%ebp)
	cmpl	$15, -20(%ebp)
	jle	L71
	addl	$12, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L64:
	movb	$0, (%edx,%esi)
	jmp	L61
L69:
	cmpl	$48, %eax
	jne	L67
	movb	$7, (%edx,%esi)
	jmp	L61
L66:
	movb	-13(%ebp), %al
	movb	%al, (%edx,%esi)
	jmp	L61
	.balign 2
.globl _putblock8_8
	.def	_putblock8_8;	.scl	2;	.type	32;	.endef
_putblock8_8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%esi, %esi
	pushl	%ebx
	subl	$12, %esp
	cmpl	20(%ebp), %esi
	jge	L88
	xorl	%edi, %edi
L86:
	xorl	%ebx, %ebx
	cmpl	16(%ebp), %ebx
	jge	L90
	movl	32(%ebp), %eax
	addl	%edi, %eax
	movl	%eax, -20(%ebp)
L85:
	movl	28(%ebp), %eax
	movl	24(%ebp), %edx
	addl	%esi, %eax
	addl	%ebx, %edx
	imull	12(%ebp), %eax
	addl	%edx, %eax
	movl	8(%ebp), %ecx
	movl	-20(%ebp), %edx
	incl	%ebx
	movb	(%edx), %dl
	movb	%dl, (%eax,%ecx)
	incl	-20(%ebp)
	cmpl	16(%ebp), %ebx
	jl	L85
L90:
	incl	%esi
	addl	36(%ebp), %edi
	cmpl	20(%ebp), %esi
	jl	L86
L88:
	addl	$12, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.def	_io_store_eflags;	.scl	2;	.type	32;	.endef
	.def	_io_out8;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_io_load_eflags;	.scl	2;	.type	32;	.endef
	.def	_set_palette;	.scl	2;	.type	32;	.endef
	.def	_io_hlt;	.scl	2;	.type	32;	.endef
	.def	_putblock8_8;	.scl	2;	.type	32;	.endef
	.def	_init_mouse_cursor8;	.scl	2;	.type	32;	.endef
	.def	_putFonts8_asc;	.scl	2;	.type	32;	.endef
	.def	_sprintf;	.scl	2;	.type	32;	.endef
	.def	_init_desktop;	.scl	2;	.type	32;	.endef
	.def	_init_palette;	.scl	2;	.type	32;	.endef
